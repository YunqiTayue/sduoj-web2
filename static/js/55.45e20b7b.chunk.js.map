{"version":3,"sources":["Utils/MarkdownPreview.ts","Utils/MarkdownText.tsx","Component/problemSet/API/getProblemSetInfo.ts","Component/problemSet/PSHeader.tsx","Component/problemSet/PSLayout.tsx"],"names":["host","MarkdownText","props","running","setRunning","useState","nowText","setNowText","useEffect","isValueEmpty","text","code","id","trim","replaceAll","config","mode","cdn","emojiPath","theme","path","hljs","lineNumber","markdown","toc","mark","footnotes","autoSpace","math","inlineDigit","engine","VditorPreview","preview","document","getElementById","MarkdownPreview","then","res","style","overflowY","useProblemSetInfo","psid","onError","undefined","problemSetInfo","useSelector","state","ProblemSetReducer","problemSetInfo_cache","dispatch","useDispatch","nowKey","setNowKey","nowValue","setNowValue","type","key","data","cApi","getProblemSetInfo","parseInt","catch","error","connect","roles","UserReducer","userInfo","withTranslation","withRouter","problemSetId","match","params","location","pathname","history","replace","UrlPrefix","menuData","name","link","re","menuList","isAdmin","push","map","value","marginTop","extra","title","to","groupId","size","icon","LeftOutlined","useSameSE","textAlign","fontWeight","fontSize","paddingRight","description","block","options","onChange","item","State","ContestReducer","UState","minWidth","realName","nickname","sduId","username","pageWidth","setPageWidth","querySelector","clientWidth","window","addEventListener","handleResize","removeEventListener","e","target","innerWidth","Math","max","content","fallback","Loading","router_ProblemSet","exact","component","LoginCheck","jump","margin","maxWidth","marginLeft","WaterMark","rotate","gapX","gapY","offsetLeft","fontColor","zIndex"],"mappings":"iIAIA,MAEMA,EAFU,2B,kBCqBDC,IArBOC,IAElB,MAAOC,EAASC,GAAcC,oBAAkB,IACzCC,EAASC,GAAcF,oBAAkB,GAYhD,OAVAG,qBAAU,KACDC,YAAaP,EAAMQ,OAAUP,GAAWG,IAAYJ,EAAMQ,OAC3DN,GAAW,GACXG,EAAWL,EAAMQ,MDJtB,SAAyBC,EAAiCC,GAAa,IAAD,OACrEH,YAAaE,IAASF,YAAY,UAACE,SAAD,aAAC,EAAME,WAASF,EAAO,IAG7DA,EAAI,UAFJA,EAAI,UAAGA,SAAH,aAAG,EAAMG,WAAW,yBAA0B,2BAE9C,aAAG,EAAMA,WAAW,gBAAiB,UACzC,MAAMC,EAAS,CACXC,KAAM,QACNC,IAAKjB,EAAO,UACZkB,UAAWlB,EAAO,4BAClBmB,MAAO,CACHC,KAAMpB,EAAO,kCAEjBqB,KAAM,CACFC,YAAY,GAEhBC,SAAU,CACNC,KAAK,EACLC,MAAM,EACNC,WAAW,EACXC,WAAW,GAEfC,KAAM,CACFC,aAAa,EACbC,OAAQ,UAIhB,OAAOC,IAAcC,QAAQC,SAASC,eAAetB,GAAKD,EAAMI,GCtBxDoB,CAAgBjC,EAAMQ,KAAMR,EAAMU,IAAIwB,MAAMC,IACxCjC,GAAW,SAGpB,CAACF,EAAMU,GAAIV,EAAMQ,KAAMP,IAGtB,qBAAKS,GAAIV,EAAMU,GAAI0B,MAAO,CAACC,UAAW,c,kCCpB9C,4BAkDeC,IA9CW,SAACC,GAA4C,IAA9BC,EAA6B,4DAAdC,EACpD,MAAMC,EAAiBC,aAAaC,GACzBA,EAAMC,kBAAkBH,eAAeH,KAE5CO,EAAuBH,aAAaC,GAC/BA,EAAMC,kBAAkBH,eAAeH,EAAO,YAEnDQ,EAAWC,eAEVC,EAAQC,GAAa/C,sBACrBgD,EAAUC,GAAejD,qBAiChC,OA/BAG,qBAAU,KACF2C,IAAWV,QACkBE,IAAzBK,QAAyDL,IAAnBC,GACtCK,EAAS,CACLM,KAAM,oBACNC,IAAKf,EAAO,SACZgB,MAAM,IAEVC,IAAKC,kBAAkB,CAAClB,KAAMmB,SAASnB,KAAQL,MAAMC,IACjDY,EAAS,CACLM,KAAM,oBACNC,IAAKf,EACLgB,KAAMpB,IAEVY,EAAS,CACLM,KAAM,oBACNC,IAAKf,EAAO,SACZgB,UAAMd,IAEVW,EAAYjB,MACbwB,OAAOC,IACNpB,GAAWA,EAAQoB,OAGvBR,EAAYV,GAEhBQ,EAAUX,IAEVa,EAAYV,KAEjB,CAACA,EAAgBH,IACbY,I,qKCmFIU,mBATUjB,IAAgB,IAAD,EAEpC,MAAO,CACHkB,MAAK,UAFiBlB,EAAMmB,YAEdC,gBAAT,aAAE,EAAiBF,UAIJf,IAAD,KAEZc,CAGbI,cACEC,aAzHclE,IACd,MAAMmE,EAAenE,EAAMoE,MAAMC,OAAOF,aAClCjD,EAAOlB,EAAMsE,SAASC,SAMtB7B,EAAiBJ,YAAkB6B,GAJzB,KACZnE,EAAMwE,QAAQC,QAAQC,IAAY,qBAAuBP,MAMvDQ,EAAW,CACb,CACIC,KAAM,eACNC,KAAMH,IAAY,eAAiBP,EAAe,YAClDW,GAAI,+BAER,CACIF,KAAM,eACNC,KAAMH,IAAY,eAAiBP,EAAe,eAClDW,GAAI,8BAER,CACIF,KAAM,eACNC,KAAMH,IAAY,eAAiBP,EAAe,UAClDW,GAAI,6BAER,CACIF,KAAM,eACNC,KAAMH,IAAY,eAAiBP,EAAe,QAClDW,GAAI,2BAER,CACIF,KAAM,2BACNC,KAAMH,IAAY,eAAiBP,EAAe,cAClDW,GAAI,mCAIL7B,EAAQC,GAAa/C,qBAEtB4E,EAAgB,CAAC,eAAM,gBAgB7B,OAfgC,KAAd,OAAdrC,QAAc,IAAdA,OAAA,EAAAA,EAAgBsC,UAChBD,EAASE,KAAK,eAAM,2BAAQ,gBAGhC3E,qBAAU,KAC0C,OAA5CY,EAAKkD,MAAM,8BACXpE,EAAMwE,QAAQC,QAAQE,EAAS,GAAGE,MAEtCF,EAASO,KAAKC,IACmB,OAAzBjE,EAAKkD,MAAMe,EAAML,KAAc5B,EAAUiC,EAAMP,WAGxD,CAAC1D,IAIA,wCACwBuB,IAAnBC,GACG,qCACI,eAAC,IAAD,CACIN,MAAO,CAACgD,UAAW,IACnBC,MACI,qBAAKjD,MAAO,CAACgD,UAAW,MAI5BE,MAAO,mCACH,cAAC,IAAD,CAAMC,GAAIb,IAAS,iBAAahC,EAAe8C,SAA/C,SACI,cAAC,IAAD,CAAQC,KAAM,QAASC,KAAM,cAACC,EAAA,EAAD,IAA7B,gCATZ,UAayC,IAApCjD,EAAe7B,OAAO+E,WACnB,mCACI,qBAAKxD,MAAO,CAACyD,UAAW,UAAxB,SACI,sBAAMzD,MAAO,CAAC0D,WAAY,OAAQC,SAAU,WAA5C,SACI,sBAAM3D,MAAO,CAAC4D,aAAc,IAA5B,SAAkCtD,EAAekC,cAK/DrE,YAAamC,EAAeuD,eACtB1F,YAAamC,EAAeuD,YAAYtF,SACxC,cAACZ,EAAA,EAAD,CAAcW,GAAI,iCACJF,KAAMkC,EAAeuD,YAAYtF,YAG3D,cAAC,IAAD,CACIuF,OAAK,EACLC,QAASpB,EACTI,MAAOlC,EACPmD,SAAWjB,IACPR,EAASO,KAAKmB,IACNA,EAAKzB,OAASO,GACdnF,EAAMwE,QAAQS,KAAKoB,EAAKxB,sB,uCCnB7ChB,uBAZUjB,IAAgB,IAAD,IACpC,MAAM0D,EAAsB1D,EAAM2D,eAC5BC,EAAoB5D,EAAMmB,YAChC,MAAO,CACH0C,SAAUH,EAAMG,SAChBC,SAAQ,UAAEF,EAAOxC,gBAAT,aAAE,EAAiB2C,SAC3BC,MAAK,UAAEJ,EAAOxC,gBAAT,aAAE,EAAiB6C,aAIJ9D,IAAD,KAEZc,CAGbI,cAAkBC,aAhFFlE,IAAgB,IAAD,EAE7B,IAAIyG,EAAW,IAEf,MAAOK,EAAWC,GAAgB5G,mBAAQ,UAAS4B,SAASiF,cAAc,eAAhC,aAAS,EAAgCC,aAEnF3G,qBAAU,KACN4G,OAAOC,iBAAiB,SAAUC,GAC3B,KACHF,OAAOG,oBAAoB,SAAUD,OAG7C,MAAMA,EAAgBE,IAClBP,EAAaO,EAAEC,OAAOC,aAG8C,IAAD,EAAN,OAA7DxH,EAAMsE,SAASC,SAASH,MAAM,6BAC9BqC,EAAWgB,KAAKC,IAAI,KAAK,UAAC1H,EAAMyG,gBAAP,QAAmB,GAAK,MAGrD,MAAMkB,EACF,qCACI,cAAC,EAAD,IACA,cAAC,WAAD,CAAUC,SAAU,cAACC,EAAA,EAAD,IAApB,SACKC,IAAkB5C,KAAI,IAAmC,IAAlC,GAACxE,EAAD,KAAKQ,EAAL,MAAW6G,EAAX,UAAkBC,GAAe,EACrD,OACI,cAAC,IAAD,CACa9G,KAAMA,EAAM6G,MAAOA,EAC5BC,UAAWA,GADNtH,WAQ7B,OACI,qCACI,cAACuH,EAAA,EAAD,CAAYC,MAAM,IAClB,qBAAK9F,MAAOqE,GAAY,KAAO,CAACZ,UAAW,SAAUsC,OAAQ,eAAY1F,EAAzE,SACI,qBAAKL,MAAOqE,GAAY,KAAO,CAC3BZ,UAAW,OACXuC,SAAU,SACVD,OAAQ,UACR,CACAtC,UAAW,OACXuC,SAAU,SACVC,WAAYZ,KAAKC,IAAI,GAAIZ,EAAsBL,GAAY,IAP/D,SASI,cAAC6B,EAAA,EAAD,CACIC,QAAS,GACTC,KAAM,IACNC,KAAM,IACNC,WAAY,GACZf,QAAS3H,EAAM0G,SAAW,IAAM1G,EAAM4G,MACtC+B,UAAU,2BACV5C,SAAU,GACV6C,OAAQ,IARZ,SAUKjB","file":"static/js/55.45e20b7b.chunk.js","sourcesContent":["// @ts-ignore\nimport VditorPreview from 'vditor/dist/method.min'\nimport {isValueEmpty} from \"./empty\";\n\nconst runHost = \"https://oj.qd.sdu.edu.cn\"\nconst devHost = \"https://oj.cs.sdu.edu.cn:3000\"\nconst host = process.env.NODE_ENV === 'development' ? devHost : runHost;\n\nexport function MarkdownPreview(code: string | null | undefined, id: string) {\n    if (isValueEmpty(code) || isValueEmpty(code?.trim())) code = \"\"\n    code = code?.replaceAll(/`{3}\\n([-|0-9a-zA-Z])/g, \"```plaintext\\n$1\")\n    // 针对原本 $ 换行的公式，加以修正\n    code = code?.replaceAll(/\\$\\n(.*)\\n\\$/g, \"$ $1 $\")\n    const config = {\n        mode: \"light\",\n        cdn: host + \"/vditor\",\n        emojiPath: host + \"/vditor/dist/images/emoji\",\n        theme: {\n            path: host + \"/vditor/dist/css/content-theme\"\n        },\n        hljs: {\n            lineNumber: false\n        },\n        markdown: {\n            toc: true,\n            mark: true,\n            footnotes: true,\n            autoSpace: true,\n        },\n        math: {\n            inlineDigit: true,\n            engine: 'KaTeX'\n        }\n    }\n    // return VditorPreview.md2html(code, config)\n    return VditorPreview.preview(document.getElementById(id), code, config)\n}\n","import {MarkdownPreview} from \"./MarkdownPreview\";\nimport {useEffect, useState} from \"react\";\nimport {isValueEmpty} from \"./empty\";\n\nconst MarkdownText = (props: any) => {\n\n    const [running, setRunning] = useState<boolean>(false);\n    const [nowText, setNowText] = useState<boolean>(false);\n\n    useEffect(() => {\n        if (!isValueEmpty(props.text) && !running && nowText !== props.text) {\n            setRunning(true)\n            setNowText(props.text)\n            MarkdownPreview(props.text, props.id).then((res: any) => {\n                setRunning(false)\n            })\n        }\n    }, [props.id, props.text, running])\n\n    return (\n        <div id={props.id} style={{overflowY: \"hidden\"}}>\n        </div>\n    )\n}\n\nexport default MarkdownText\n","import {useDispatch, useSelector} from \"react-redux\";\nimport cApi from \"Utils/API/c-api\"\nimport {useEffect, useState} from \"react\";\n\nconst useProblemSetInfo = (psid: string, onError: any = undefined) => {\n    const problemSetInfo = useSelector((state: any) => {\n        return state.ProblemSetReducer.problemSetInfo[psid]\n    })\n    const problemSetInfo_cache = useSelector((state: any) => {\n        return state.ProblemSetReducer.problemSetInfo[psid + \"-cache\"]\n    })\n    const dispatch = useDispatch()\n\n    const [nowKey, setNowKey] = useState<string>()\n    const [nowValue, setNowValue] = useState<any>()\n\n    useEffect(() => {\n        if (nowKey !== psid) {\n            if (problemSetInfo_cache === undefined && problemSetInfo === undefined) {\n                dispatch({\n                    type: \"setProblemSetInfo\",\n                    key: psid + \"-cache\",\n                    data: true\n                })\n                cApi.getProblemSetInfo({psid: parseInt(psid)}).then((res: any) => {\n                    dispatch({\n                        type: \"setProblemSetInfo\",\n                        key: psid,\n                        data: res\n                    })\n                    dispatch({\n                        type: \"setProblemSetInfo\",\n                        key: psid + \"-cache\",\n                        data: undefined\n                    })\n                    setNowValue(res)\n                }).catch((error) => {\n                    onError && onError(error)\n                })\n            } else {\n                setNowValue(problemSetInfo)\n            }\n            setNowKey(psid)\n        } else {\n            setNowValue(problemSetInfo)\n        }\n    }, [problemSetInfo, psid])\n    return nowValue\n}\n\nexport default useProblemSetInfo\n","import {Link, withRouter} from \"react-router-dom\";\nimport {Button, Card, Segmented, Space} from \"antd\";\nimport {isValueEmpty} from \"../../Utils/empty\";\nimport MarkdownText from \"../../Utils/MarkdownText\";\nimport React, {Dispatch, useEffect, useState} from \"react\";\nimport useProblemSetInfo from \"./API/getProblemSetInfo\";\nimport {UrlPrefix} from \"../../Config/constValue\";\nimport {connect} from \"react-redux\";\nimport {withTranslation} from \"react-i18next\";\nimport {UserState} from \"../../Type/Iuser\";\nimport PSTakePicture from \"./PSTakePicture\";\nimport {LeftOutlined} from \"@ant-design/icons\";\n\nconst PSHeader = (props: any) => {\n    const problemSetId = props.match.params.problemSetId\n    const path = props.location.pathname\n\n    const onError = () => {\n        props.history.replace(UrlPrefix + \"/problemSetPublic/\" + problemSetId)\n    }\n\n    const problemSetInfo = useProblemSetInfo(problemSetId, onError)\n\n\n    const menuData = [\n        {\n            name: \"总览\",\n            link: UrlPrefix + \"/problemSet/\" + problemSetId + \"/overview\",\n            re: /\\/problemSet\\/.*\\/overview/g\n        },\n        {\n            name: \"题目\",\n            link: UrlPrefix + \"/problemSet/\" + problemSetId + \"/problem/0/0\",\n            re: /\\/problemSet\\/.*\\/problem/g\n        },\n        {\n            name: \"评阅\",\n            link: UrlPrefix + \"/problemSet/\" + problemSetId + \"/review\",\n            re: /\\/problemSet\\/.*\\/review/g\n        },\n        {\n            name: \"榜单\",\n            link: UrlPrefix + \"/problemSet/\" + problemSetId + \"/rank\",\n            re: /\\/problemSet\\/.*\\/rank/g\n        },\n        {\n            name: \"提交列表\",\n            link: UrlPrefix + \"/problemSet/\" + problemSetId + \"/submission\",\n            re: /\\/problemSet\\/.*\\/submission/g\n        },\n    ]\n\n    const [nowKey, setNowKey] = useState<any>()\n\n    const menuList: any = [\"总览\", \"题目\"]\n    if (problemSetInfo?.isAdmin === true)\n        menuList.push('评阅', \"提交列表\", \"榜单\")\n\n\n    useEffect(() => {\n        if (path.match(/\\/problemSet\\/[0-9]*\\/?$/g) !== null) {\n            props.history.replace(menuData[0].link)\n        }\n        menuData.map((value) => {\n            if (path.match(value.re) !== null) setNowKey(value.name)\n            return undefined\n        })\n    }, [path])\n\n\n    return (\n        <>\n            {problemSetInfo !== undefined && (\n                <>\n                    <Card\n                        style={{marginTop: 25}}\n                        extra={\n                            <div style={{marginTop: 12}}>\n                                {/*<PSTakePicture/>*/}\n                            </div>\n                        }\n                        title={<>\n                            <Link to={UrlPrefix + `/group/${problemSetInfo.groupId}`}>\n                                <Button size={\"small\"} icon={<LeftOutlined/>}> 返回 </Button>\n                            </Link>\n                        </>}\n                    >\n                        {problemSetInfo.config.useSameSE === 1 && (\n                            <>\n                                <div style={{textAlign: \"center\"}}>\n                                    <span style={{fontWeight: \"bold\", fontSize: \"1.45rem\"}}>\n                                        <span style={{paddingRight: 10}}>{problemSetInfo.name}</span>\n                                    </span>\n                                </div>\n                            </>\n                        )}\n                        {!isValueEmpty(problemSetInfo.description)\n                            && !isValueEmpty(problemSetInfo.description.trim()) && (\n                                <MarkdownText id={\"problemSet-markdownDescription\"}\n                                              text={problemSetInfo.description.trim()}/>\n                            )}\n                    </Card>\n                    <Segmented\n                        block\n                        options={menuList}\n                        value={nowKey}\n                        onChange={(value) => {\n                            menuData.map((item) => {\n                                if (item.name === value)\n                                    props.history.push(item.link)\n                                return undefined\n                            })\n                        }}\n\n                    />\n                </>\n            )}\n        </>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    const UState: UserState = state.UserReducer\n    return {\n        roles: UState.userInfo?.roles,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(\n    withRouter(PSHeader)\n))\n","import {Route, withRouter} from \"react-router-dom\";\nimport PSHeader from \"./PSHeader\";\nimport Loading from \"../../Utils/Loading\";\nimport {router_ProblemSet} from \"../../Config/router/routerC\";\nimport React, {Dispatch, Suspense, useEffect, useState} from \"react\";\nimport LoginCheck from \"../common/LoginCheck\";\nimport {ContestState} from \"../../Redux/Action/contest\";\nimport {connect} from \"react-redux\";\nimport {withTranslation} from \"react-i18next\";\nimport {WaterMark} from \"@ant-design/pro-layout\";\nimport {UserState} from \"../../Type/Iuser\";\n\n\nconst PSLayout = (props: any) => {\n    // const path = props.location.pathname\n    let minWidth = 500\n\n    const [pageWidth, setPageWidth] = useState<number>(document.querySelector('body')?.clientWidth as number)\n\n    useEffect(() => {\n        window.addEventListener('resize', handleResize)\n        return () => {\n            window.removeEventListener('resize', handleResize)\n        }\n    },)\n    const handleResize = (e: any) => {\n        setPageWidth(e.target.innerWidth)\n    }\n\n    if (props.location.pathname.match(/\\/problemSet\\/.*\\/rank/g) !== null) {\n        minWidth = Math.max(500, (props.minWidth ?? 0) + 100)\n    }\n\n    const content = (\n        <>\n            <PSHeader/>\n            <Suspense fallback={<Loading/>}>\n                {router_ProblemSet.map(({id, path, exact, component}) => {\n                    return (\n                        <Route\n                            key={id} path={path} exact={exact}\n                            component={component}/>\n                    )\n                })}\n            </Suspense>\n        </>\n    )\n\n    return (\n        <>\n            <LoginCheck jump={true}/>\n            <div style={minWidth <= 1500 ? {textAlign: \"center\", margin: \"0 auto\"} : undefined}>\n                <div style={minWidth <= 1500 ? {\n                    textAlign: \"left\",\n                    maxWidth: \"1500px\",\n                    margin: \"0 auto\"\n                } : {\n                    textAlign: \"left\",\n                    maxWidth: \"1500px\",\n                    marginLeft: Math.max(0, (pageWidth as number - minWidth) / 2)\n                }}>\n                    <WaterMark\n                        rotate={-25}\n                        gapX={200}\n                        gapY={200}\n                        offsetLeft={20}\n                        content={props.realName + \" \" + props.sduId}\n                        fontColor='rgba(212, 212, 212, 0.5)'\n                        fontSize={18}\n                        zIndex={500}\n                    >\n                        {content}\n                    </WaterMark>\n                </div>\n            </div>\n        </>\n    )\n}\nconst mapStateToProps = (state: any) => {\n    const State: ContestState = state.ContestReducer\n    const UState: UserState = state.UserReducer\n    return {\n        minWidth: State.minWidth,\n        realName: UState.userInfo?.nickname,\n        sduId: UState.userInfo?.username,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(withRouter(PSLayout)))\n"],"sourceRoot":""}