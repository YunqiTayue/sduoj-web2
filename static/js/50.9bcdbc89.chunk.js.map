{"version":3,"sources":["Component/user/Form/Item/ItemCaptcha.tsx","Component/user/Form/Item/ItemUsername.tsx","Component/user/Form/Item/ItemEmail.tsx","Utils/getUrlParams.ts","Assert/img/sdu-logo.jpg","Component/user/Form/Register.tsx","Component/user/Form/Binding.tsx","Pages/Client/CThirdPartyLogin.tsx"],"names":["withTranslation","props","image","setImage","useState","getCaptcha","CApi","then","data","captcha","setImgId","captchaId","useEffect","content","span","onChange","e","undefined","setCaptcha","target","value","offset","src","height","icon","onClick","map","Item","name","label","t","rules","required","editable","notRequired","message","getFieldValue","validator","_","ExistCheck","isExist","username","Promise","resolve","reject","catch","hasFeedback","disabled","bordered","canSend","setCanSend","modalVis","setModalVis","imgId","email","setEmail","intervalId","setInterval","clearInterval","needVerify","notCheck","type","title","visible","maskClosable","destroyOnClose","onOk","sendVerificationEmail","event","emailVerifyType","res","success","onCancel","emailTitle","test","checkExist","onPressEnter","addonAfter","getEmail","error","getUrlParams","url","obj","index","indexOf","params","substr","parr","split","i","arr","withRouter","form","useForm","token","setFieldsValue","dispatch","useDispatch","ModalForm","trigger","button","autoFocusFirstInput","modalProps","width","okText","onFinish","async","Object","assign","values","thirdPartyRegister","register","ItemUsername","ItemPassword","ItemEmail","validateFields","thirdPartyBinding","history","push","UrlPrefix","noConfirm","CThirdPartyLogin","Component","constructor","context","super","this","state","loading","thirdParty","info","sduId","componentDidMount","paras","location","search","thirdPartyLogin","ticket","resData","user","sduRealName","setState","render","className","style","tip","textAlign","margin","SDU_Logo","preview","fontWeight","direction","size","block","connect"],"mappings":"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","file":"static/js/50.9bcdbc89.chunk.js","sourcesContent":["import {Button, Col, Form, Image, Input, Row} from \"antd\";\nimport React, {useEffect, useState} from \"react\";\nimport {withTranslation} from \"react-i18next\";\nimport CApi from \"Utils/API/c-api\"\nimport {RedoOutlined} from \"@ant-design/icons\"\n\nconst ItemCaptcha = (props: any) => {\n\n    const [image, setImage] = useState<string>()\n\n    const getCaptcha = () => {\n        CApi.getCaptcha().then((data: any) => {\n            setImage(data.captcha)\n            props.setImgId(data.captchaId)\n        })\n    }\n\n    useEffect(() => {\n        getCaptcha()\n    }, [])\n\n    const content = (\n        <Row>\n            <Col span={14}>\n                <Input onChange={(e) => {\n                    if (props.setCaptcha !== undefined)\n                        props.setCaptcha(e.target.value)\n                }}/>\n            </Col>\n            <Col offset={1} span={8}>\n                <Image src={image} height={32}/>\n            </Col>\n            <Col span={1}>\n                <Button\n                    icon={<RedoOutlined/>}\n                    onClick={() => {\n                        getCaptcha()\n                    }}/>\n            </Col>\n        </Row>\n    )\n\n    return (\n        <>\n            {\n                [''].map(() => {\n                    if (props.setCaptcha !== undefined) {\n                        return content\n                    } else {\n                        return (\n                            <Form.Item\n                                name=\"captcha\"\n                                label={props.t(\"captcha\")}\n                                rules={[\n                                    {required: true},\n                                ]}\n                            >\n                                {content}\n                            </Form.Item>\n                        )\n                    }\n                })\n            }\n        </>\n    )\n}\n\nexport default withTranslation()(ItemCaptcha)\n","import {Form, Input} from \"antd\";\nimport React from \"react\";\nimport {withTranslation} from \"react-i18next\";\nimport CApi from \"../../../../Utils/API/c-api\";\n\nconst ItemUsername = (props: any) => {\n    return (\n        <Form.Item\n            name=\"username\"\n            label={props.t(\"username\")}\n            rules={\n                [\n                    {\n                        required:\n                            props.editable !== false && props.notRequired !== true,\n                        message: props.t(\"usernameEmpty\")\n                    },\n                    ({getFieldValue}) => ({\n                        validator(_, value) {\n                            if (props.ExistCheck === true) {\n                                return CApi.isExist({username: value}).then((data: any) => {\n                                    if (data === false) return Promise.resolve()\n                                    else if (data === true) return Promise.reject(\"用户名已存在\")\n                                    return Promise.reject(\"检验失败\")\n                                }).catch((e: any) => {\n                                    return Promise.reject(e)\n                                })\n                            }\n                            return Promise.resolve()\n                        },\n                    }),\n                ]\n            }\n            hasFeedback>\n            <Input\n                disabled={props.editable === false}\n                bordered={props.editable}\n            />\n        </Form.Item>\n    )\n}\n\nexport default withTranslation()(ItemUsername)","import {Button, Form, Input, message, Modal} from \"antd\";\nimport React, {useEffect, useState} from \"react\";\nimport {withTranslation} from \"react-i18next\";\nimport CApi from \"Utils/API/c-api\"\nimport ItemCaptcha from \"./ItemCaptcha\";\nimport {emailType} from \"../../../../Type/types\";\n\nexport interface ItemEmailProps {\n    needVerify: boolean\n    editable: boolean\n    getEmail: any\n    emailVerifyType: emailType  // 邮箱验证类型\n    checkExist?: boolean        // 是否检查邮箱是否存在\n    emailTitle?: string         // 标题\n    onPressEnter?: any\n}\n\nconst ItemEmail = (props: ItemEmailProps & any) => {\n    const [canSend, setCanSend] = useState<number>(0);\n    const [modalVis, setModalVis] = useState<boolean>(false);\n    const [imgId, setImgId] = useState<string>(\"\")\n    const [captcha, setCaptcha] = useState<string>(\"\")\n    const [email, setEmail] = useState<string>(\"\")\n\n    const reduce = () => {\n        if (canSend > 0) {\n            setCanSend(canSend - 1)\n        }\n    }\n\n    useEffect(() => {\n        let intervalId = setInterval(() => reduce(), 1000)\n        return () => clearInterval(intervalId)\n    })\n\n    return (\n        <>\n            {props.needVerify === false && (\n                <Form.Item name=\"email\" label={props.t(\"email\")}\n                           rules={props.notCheck !== true ? [\n                               {type: 'email', message: props.t('emailError')},\n                               {required: props.editable !== false}\n                           ] : undefined}\n                           hasFeedback>\n                    <Input\n                        disabled={props.editable === false}\n                        bordered={props.editable !== false}\n                    />\n                </Form.Item>\n            )}\n            {props.needVerify === true && (\n                <>\n                    <Modal\n                        title={\"人机身份认证\"}\n                        visible={modalVis}\n                        maskClosable={false}\n                        destroyOnClose={true}\n                        onOk={() => {\n                            CApi.sendVerificationEmail({\n                                email: email,\n                                captcha: captcha,\n                                captchaId: imgId,\n                                event: props.emailVerifyType\n                            }).then((res) => {\n                                message.success(\"验证码已发送至您的邮箱\")\n                                setCanSend(60);\n                                setModalVis(false)\n                            })\n                        }}\n                        onCancel={() => {\n                            setModalVis(false)\n                        }}\n                    >\n                        <ItemCaptcha\n                            setImgId={setImgId}\n                            setCaptcha={setCaptcha}\n                        />\n                    </Modal>\n                    <Form.Item\n                        name=\"email\"\n                        label={props.emailTitle ?? props.t(\"new email\")}\n                        rules={[\n                            {required: true},\n                            ({getFieldValue}) => ({\n                                validator(_, value) {\n                                    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n                                    if (!emailRegex.test(value)) {\n                                        return Promise.reject(props.t('emailError'));\n                                    }\n                                    if (props.checkExist === false) return Promise.resolve()\n                                    return CApi.isExist({email: value}).then((data: any) => {\n                                        if (data === false) return Promise.resolve()\n                                        else if (data === true) return Promise.reject(props.t(\"邮箱已存在\"))\n                                        return Promise.reject(props.t(\"检验失败\"))\n                                    }).catch((e: any) => {\n                                        return Promise.reject(e)\n                                    })\n                                },\n                            }),\n                        ]}>\n                        <Input\n                            disabled={props.editable === false || canSend > 0}\n                            bordered={props.editable !== false}\n                            onPressEnter={props.onPressEnter}\n                            addonAfter={\n                                <Button\n                                    type={\"text\"}\n                                    disabled={canSend !== 0}\n                                    onClick={() => {\n                                        props.getEmail().then((data: string) => {\n                                            setEmail(data)\n                                            setModalVis(true)\n                                        }).catch(() => {\n                                            message.error(\"邮箱不合法\")\n                                        })\n                                    }}\n                                >\n                                    {(canSend !== 0 ? canSend + \"s\" : props.t(\"Verify\"))}\n                                </Button>\n                            }/>\n                    </Form.Item>\n                    <Form.Item name=\"emailCode\" label={props.t(\"emailCode\")}\n                               rules={[{required: true}]}>\n                        <Input onPressEnter={props.onPressEnter}/>\n                    </Form.Item>\n                </>\n            )}\n        </>\n    )\n}\n\nexport default withTranslation()(ItemEmail)\n","export function getUrlParams(url: string) {\n    let obj: any = {},\n        index = url.indexOf('?'), // 看url有没有参数\n        params = url.substr(index + 1); // 截取url参数部分 id = 1 & type = 2\n\n    if (index !== -1) { // 有参数时\n        let parr = params.split('&');  // 将参数分割成数组 [\"id = 1 \", \" type = 2\"]\n        for (let i of parr) {           // 遍历数组\n            let arr = i.split('=');  // 1） i id = 1   arr = [id, 1]  2）i type = 2  arr = [type, 2]\n            obj[arr[0]] = arr[1];  // obj[arr[0]] = id, obj.id = 1   obj[arr[0]] = type, obj.type = 2\n        }\n    }\n    return obj\n}","export default __webpack_public_path__ + \"static/media/sdu-logo.9fcfaf04.jpg\";","import {ModalForm} from \"@ant-design/pro-form\";\nimport {message} from \"antd\";\nimport ItemUsername from \"./Item/ItemUsername\";\nimport ItemPassword from \"./Item/ItemPassword\";\nimport ItemEmail from \"./Item/ItemEmail\";\nimport React, {useEffect} from \"react\";\nimport {useForm} from \"antd/es/form/Form\";\nimport CApi from \"Utils/API/c-api\"\nimport {withRouter} from \"react-router-dom\";\nimport {useDispatch} from \"react-redux\";\n\n\nconst Register = (props: any) => {\n    const [form] = useForm()\n\n    useEffect(() => {\n        if (props.token !== undefined)\n            form.setFieldsValue({username: props.username})\n    }, [props, form])\n\n    const dispatch = useDispatch()\n\n    return (\n        <ModalForm<any>\n            title={props.token !== undefined ? \"注册并绑定\" : \"用户注册\"}\n            trigger={props.button}\n            autoFocusFirstInput\n            modalProps={{\n                maskClosable: false,\n                destroyOnClose: true,\n                width: 500,\n                okText: \"提交\"\n            }}\n            form={form}\n            onFinish={async (values) => {\n                if (props.token !== undefined) {\n                    Object.assign(values, {token: props.token})\n                    return CApi.thirdPartyRegister(values).then((res: any) => {\n                        dispatch({type: \"userLogin\"})\n                        dispatch({type: \"setUserInfo\", data: res})\n                        message.success('注册成功');\n                        return true;\n                    })\n                } else {\n                    return CApi.register(values).then((res: any) => {\n                        dispatch({type: \"userLogin\"})\n                        dispatch({type: \"setUserInfo\", data: res})\n                        message.success('注册成功');\n                        return true;\n                    })\n                }\n            }}\n        >\n            <ItemUsername ExistCheck={true} editable={props.token === undefined}/>\n            <ItemPassword/>\n            <ItemEmail emailVerifyType={props.token !== undefined ? \"thirdPartyRegisterOrBinding\" : \"register\"}\n                       needVerify={true} getEmail={() => {\n                return form.validateFields([\"email\"]).then((data: any) => {\n                    return Promise.resolve(data.email)\n                }).catch(() => Promise.reject())\n            }}/>\n        </ModalForm>\n    )\n}\n\nexport default withRouter(Register)\n","import {ModalForm} from \"@ant-design/pro-form\";\nimport {message} from \"antd\";\nimport ItemUsername from \"./Item/ItemUsername\";\nimport ItemPassword from \"./Item/ItemPassword\";\nimport React from \"react\";\nimport {useForm} from \"antd/es/form/Form\";\nimport CApi from \"Utils/API/c-api\"\nimport {withTranslation} from \"react-i18next\";\nimport {withRouter} from \"react-router\";\nimport {useDispatch} from \"react-redux\";\nimport {UrlPrefix} from \"../../../Config/constValue\";\n\nconst Binding = (props: any) => {\n    const [form] = useForm()\n    const dispatch = useDispatch()\n    return (\n        <ModalForm<any>\n            title=\"绑定已有账号\"\n            trigger={props.button}\n            autoFocusFirstInput\n            modalProps={{\n                maskClosable: false,\n                destroyOnClose: true,\n                width: 500,\n                okText: \"提交\"\n            }}\n            form={form}\n            onFinish={async (values) => {\n                Object.assign(values, {token: props.token})\n                return CApi.thirdPartyBinding(values).then((res: any) => {\n                    dispatch({type: \"userLogin\"})\n                    dispatch({type: \"setUserInfo\", data: res})\n                    props.history.push(UrlPrefix + \"/home\")\n                    message.success('绑定成功');\n                    return true;\n                })\n            }}\n        >\n            <ItemUsername/>\n            <ItemPassword noConfirm={true}/>\n        </ModalForm>\n    )\n}\n\n\nexport default withTranslation()(\n    withRouter(Binding)\n)\n","import React, {Component, Dispatch} from \"react\";\nimport {Button, Card, Image, message, Space, Spin} from \"antd\";\nimport {connect} from \"react-redux\";\nimport {withTranslation} from \"react-i18next\";\nimport {withRouter} from \"react-router\";\nimport {getUrlParams} from \"../../Utils/getUrlParams\";\nimport CApi from \"../../Utils/API/c-api\";\nimport SDU_Logo from \"../../Assert/img/sdu-logo.jpg\";\nimport Register from \"../../Component/user/Form/Register\";\nimport Binding from \"../../Component/user/Form/Binding\";\nimport {UrlPrefix} from \"../../Config/constValue\";\n\n\nclass CThirdPartyLogin extends Component<any, any> {\n\n\n    constructor(props: any, context: any) {\n        super(props, context);\n        this.state = {\n            loading: true,\n            thirdParty: \"\",\n            info: \"\",\n            token: \"\",\n            sduId: \"\"\n        }\n    }\n\n    componentDidMount() {\n        const paras = getUrlParams(this.props.location.search)\n        CApi.thirdPartyLogin({\n            thirdParty: paras.thirdParty,\n            ticket: paras.ticket\n        }).then((resData: any) => {\n            message.success(this.props.t(\"certificationSuccess\"))\n            if (resData.user === null) {\n                // 之前没有绑定账号，现在进行绑定\n                let obj: any = {\n                    loading: false,\n                    thirdParty: resData.thirdParty,\n                    token: resData.token\n                }\n                if (resData.thirdParty === \"SDUCAS\") {\n                    Object.assign(obj, {\n                        info: resData.sduRealName + \" (\" + resData.sduId + \")\",\n                        sduId: resData.sduId\n                    })\n                }\n                this.setState(obj)\n            } else {\n                this.props.history.push(UrlPrefix + \"/home\")\n            }\n        })\n    }\n\n    render() {\n        return (\n            <div className={\"center\"} style={{width: 450}}>\n                {\n                    [''].map(() => {\n                        if (this.state.loading === true) {\n                            return (\n                                <Spin tip={this.props.t(\"certificationIn...\")}>\n                                    <div style={{textAlign: \"center\", margin: \"0 auto\"}}>\n                                        <div>\n                                            <Image width={200} src={SDU_Logo} preview={false}/>\n                                        </div>\n                                    </div>\n                                </Spin>\n                            )\n                        } else {\n                            return (\n                                <>\n                                    <Card title={\n                                        (\n                                            <span>\n                                                {this.props.t(\"firstTimeUse\")}\n                                                <span style={{fontWeight: \"bold\"}}>{this.state.thirdParty}</span>\n                                                {this.props.t(\"login,BindingOperationRequired\")}\n                                            </span>\n                                        )\n                                    }>\n\n                                        <Space direction={\"vertical\"} size={15}>\n                                            <div style={{textAlign: \"left\"}}>\n                                                {this.props.t(\"certificationInformation:\")}<span\n                                                style={{fontWeight: \"bold\"}}>{this.state.info}</span>\n                                            </div>\n                                            <div style={{textAlign: \"left\"}}>\n                                                {this.props.t(\"statuteOfLimitationsCurrentCertification\")}<span\n                                                style={{fontWeight: \"bold\"}}>{this.props.t(\"5Minutes\")}</span>{this.props.t(\"validWithin\")}\n                                            </div>\n                                            <Register token={this.state.token} username={this.state.sduId} button={\n                                                <Button block={true} type={\"primary\"}>{this.props.t(\"registerAsANewUserAndBind\")}</Button>\n                                            }/>\n                                            <Binding token={this.state.token} button={\n                                                <Button block={true} type={\"primary\"}>{this.props.t(\"bindExistingAccounts\")}</Button>\n                                            }/>\n                                        </Space>\n\n                                    </Card>\n                                </>\n                            )\n                        }\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: any) => {\n    return {}\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(\n    withTranslation()(\n        withRouter(CThirdPartyLogin)\n    ))\n"],"sourceRoot":""}