{"version":3,"sources":["Component/contest/API/getContestInfo.ts","Component/contest/Register.tsx"],"names":["useContestInfo","contestId","update","contestInfo","useSelector","state","ContestReducer","dispatch","useDispatch","hasUpdate","setHasUpdate","useState","useEffect","undefined","cApi","getContestInfo","then","res","type","key","data","catch","setTimeout","withTranslation","withRouter","props","form","useForm","match","params","contestInfoX","style","textAlign","margin","maxWidth","features","openness","layout","Item","label","name","required","float","onClick","validateFields","value","participateContest","password","message","success","history","replace","UrlPrefix","window","location","reload","width","block"],"mappings":"kGAAA,4BAgCeA,IA5BQ,CAACC,EAAmBC,KACvC,MAAMC,EAAcC,aAAaC,GACtBA,EAAMC,eAAeH,YAAYF,KAEtCM,EAAWC,eAEVC,EAAWC,GAAgBC,oBAAS,GAmB3C,OAjBAC,qBAAU,MACQ,IAAXV,GAAoBO,QACHI,IAAhBV,IAAwC,IAAXD,IAC7BQ,GAAa,GACbI,IAAKC,eAAe,CAACd,UAAWA,IAAYe,MAAMC,IAC9CV,EAAS,CACLW,KAAM,iBACNC,IAAKlB,EACLmB,KAAMH,OAEXI,OAAM,KACLC,YAAW,KACPZ,GAAa,KACd,WAGZ,CAACP,EAAaD,KACC,IAAXA,OAAmBW,EAAYV,I,kCC7B1C,kHAgEeoB,wBAAkBC,aAxDfC,IAEd,MAAOC,GAAQC,cAET1B,EAAYwB,EAAMG,MAAMC,OAAO5B,UAE/B6B,EAAef,YAAed,GAEpC,OACI,mCACI,qBAAK8B,MAAO,CAACC,UAAW,SAAUC,OAAQ,UAA1C,SACI,qBAAKF,MAAO,CAACC,UAAW,OAAQE,SAAU,QAASD,OAAQ,UAA3D,SACI,eAAC,IAAD,WACwC,WAAnCH,EAAaK,SAASC,UACnB,qCACI,cAAC,IAAD,CAAMC,OAAQ,WAAYX,KAAMA,EAAhC,SACI,cAAC,IAAKY,KAAN,CAAWC,MAAO,2BAAQC,KAAM,WAAhC,SACI,cAAC,IAAD,CAAOC,UAAQ,QAGvB,qBAAKV,MAAO,CAACW,MAAO,SAApB,SACI,cAAC,IAAD,CAAQxB,KAAM,UAAWyB,QAAS,KAC9BjB,EAAKkB,iBAAiB5B,MAAM6B,IACxB/B,IAAKgC,mBAAmB,CACpB7C,UAAWA,EACX8C,SAAUF,EAAME,WACjB/B,MAAK,KACJgC,IAAQC,QAAQ,4BAChBxB,EAAMyB,QAAQC,QAAQC,IAAY,YAAcnD,EAAY,aAC5DoD,OAAOC,SAASC,gBAR5B,+BAewB,WAAnCzB,EAAaK,SAASC,UACnB,mCACI,qBAAKL,MAAO,CAACyB,MAAO,MAAOxB,UAAW,SAAUC,OAAQ,UAAxD,SACI,cAAC,IAAD,CAAQf,KAAM,UAAWuC,OAAK,EAACd,QAAS,KACpC7B,IAAKgC,mBAAmB,CAAC7C,UAAWA,IAAYe,MAAK,KACjDgC,IAAQC,QAAQ,4BAChBxB,EAAMyB,QAAQC,QAAQC,IAAY,YAAcnD,EAAY,aAC5DoD,OAAOC,SAASC,aAJxB","file":"static/js/56.78e32e22.chunk.js","sourcesContent":["import {useDispatch, useSelector} from \"react-redux\";\nimport cApi from \"Utils/API/c-api\"\nimport {useEffect, useState} from \"react\";\n\nconst useContestInfo = (contestId: string, update?: boolean) => {\n    const contestInfo = useSelector((state: any) => {\n        return state.ContestReducer.contestInfo[contestId]\n    })\n    const dispatch = useDispatch()\n\n    const [hasUpdate, setHasUpdate] = useState(false)\n\n    useEffect(() => {\n        if(update === false || hasUpdate) return\n        if (contestInfo === undefined || update === true) {\n            setHasUpdate(true)\n            cApi.getContestInfo({contestId: contestId}).then((res: any) => {\n                dispatch({\n                    type: \"setContestInfo\",\n                    key: contestId,\n                    data: res\n                })\n            }).catch(()=>{\n                setTimeout(()=>{\n                    setHasUpdate(false)\n                }, 3000)\n            })\n        }\n    }, [contestInfo, update])\n    return update === false ? undefined : contestInfo\n}\n\nexport default useContestInfo","import {withTranslation} from \"react-i18next\";\nimport {withRouter} from \"react-router-dom\";\nimport {Button, Card, Form, Input, message} from \"antd\";\nimport {useForm} from \"antd/es/form/Form\";\nimport cApi from \"Utils/API/c-api\"\nimport getContestInfo from \"./API/getContestInfo\";\nimport {UrlPrefix} from \"../../Config/constValue\";\n\nconst Register = (props: any) => {\n\n    const [form] = useForm()\n    // const [update, setUpdate] = useState(false)\n    const contestId = props.match.params.contestId\n    // const contestInfo = getContestInfo(contestId, update)\n    const contestInfoX = getContestInfo(contestId)\n\n    return (\n        <>\n            <div style={{textAlign: \"center\", margin: \"0 auto\"}}>\n                <div style={{textAlign: \"left\", maxWidth: \"600px\", margin: \"0 auto\"}}>\n                    <Card>\n                        {contestInfoX.features.openness !== \"public\" && (\n                            <>\n                                <Form layout={\"vertical\"} form={form}>\n                                    <Form.Item label={\"比赛密码\"} name={\"password\"}>\n                                        <Input required/>\n                                    </Form.Item>\n                                </Form>\n                                <div style={{float: \"right\"}}>\n                                    <Button type={\"primary\"} onClick={() => {\n                                        form.validateFields().then((value: any) => {\n                                            cApi.participateContest({\n                                                contestId: contestId,\n                                                password: value.password\n                                            }).then(() => {\n                                                message.success(\"注册成功\")\n                                                props.history.replace(UrlPrefix + \"/contest/\" + contestId + \"/overview\")\n                                                window.location.reload()\n                                            })\n                                        })\n                                    }}>注册</Button>\n                                </div>\n                            </>\n                        )}\n                        {contestInfoX.features.openness === \"public\" && (\n                            <>\n                                <div style={{width: \"50%\", textAlign: \"center\", margin: \"0 auto\"}}>\n                                    <Button type={\"primary\"} block onClick={() => {\n                                        cApi.participateContest({contestId: contestId}).then(() => {\n                                            message.success(\"注册成功\")\n                                            props.history.replace(UrlPrefix + \"/contest/\" + contestId + \"/overview\")\n                                            window.location.reload()\n                                        })\n                                    }}>注册</Button>\n                                </div>\n                            </>\n                        )}\n                    </Card>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default withTranslation()(withRouter(Register))\n"],"sourceRoot":""}