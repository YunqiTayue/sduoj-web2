{"version":3,"sources":["Utils/MarkdownPreview.ts","Utils/MarkdownText.tsx","Component/common/Timer.tsx","Component/problemSet/Public.tsx"],"names":["host","MarkdownText","props","running","setRunning","useState","nowText","setNowText","useEffect","isValueEmpty","text","code","id","trim","replaceAll","config","mode","cdn","emojiPath","theme","path","hljs","lineNumber","markdown","toc","mark","footnotes","autoSpace","math","inlineDigit","engine","VditorPreview","preview","document","getElementById","MarkdownPreview","then","res","style","overflowY","Timer","Component","render","className","map","this","inline","t","value","deadline","format","onFinish","title","name","withTranslation","withRouter","problemSetId","match","params","Meta","Card","info","setInfo","State","TimeRangeState","tm_start","tm_end","undefined","cApi","getProblemSetPublic","psid","jump","icon","extra","cover","actions","type","disabled","finish","onClick","history","push","UrlPrefix","Date","now","description","paddingBottom"],"mappings":"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","file":"static/js/54.85d421e2.chunk.js","sourcesContent":["// @ts-ignore\nimport VditorPreview from 'vditor/dist/method.min'\nimport {isValueEmpty} from \"./empty\";\n\nconst runHost = \"https://oj.qd.sdu.edu.cn\"\nconst devHost = \"https://oj.cs.sdu.edu.cn:3000\"\nconst host = process.env.NODE_ENV === 'development' ? devHost : runHost;\n\nexport function MarkdownPreview(code: string | null | undefined, id: string) {\n    if (isValueEmpty(code) || isValueEmpty(code?.trim())) code = \"\"\n    code = code?.replaceAll(/`{3}\\n([-|0-9a-zA-Z])/g, \"```plaintext\\n$1\")\n    // 针对原本 $ 换行的公式，加以修正\n    code = code?.replaceAll(/\\$\\n(.*)\\n\\$/g, \"$ $1 $\")\n    const config = {\n        mode: \"light\",\n        cdn: host + \"/vditor\",\n        emojiPath: host + \"/vditor/dist/images/emoji\",\n        theme: {\n            path: host + \"/vditor/dist/css/content-theme\"\n        },\n        hljs: {\n            lineNumber: false\n        },\n        markdown: {\n            toc: true,\n            mark: true,\n            footnotes: true,\n            autoSpace: true,\n        },\n        math: {\n            inlineDigit: true,\n            engine: 'KaTeX'\n        }\n    }\n    // return VditorPreview.md2html(code, config)\n    return VditorPreview.preview(document.getElementById(id), code, config)\n}\n","import {MarkdownPreview} from \"./MarkdownPreview\";\nimport {useEffect, useState} from \"react\";\nimport {isValueEmpty} from \"./empty\";\n\nconst MarkdownText = (props: any) => {\n\n    const [running, setRunning] = useState<boolean>(false);\n    const [nowText, setNowText] = useState<boolean>(false);\n\n    useEffect(() => {\n        if (!isValueEmpty(props.text) && !running && nowText !== props.text) {\n            setRunning(true)\n            setNowText(props.text)\n            MarkdownPreview(props.text, props.id).then((res: any) => {\n                setRunning(false)\n            })\n        }\n    }, [props.id, props.text, running])\n\n    return (\n        <div id={props.id} style={{overflowY: \"hidden\"}}>\n        </div>\n    )\n}\n\nexport default MarkdownText\n","import React, {Component} from \"react\";\nimport Countdown from \"antd/lib/statistic/Countdown\";\nimport {Card, Space} from \"antd\";\nimport {ClockCircleOutlined} from \"@ant-design/icons\"\nimport {WithTranslation, withTranslation} from \"react-i18next\";\n\ninterface ITimer {\n    name?: string        // 如：距离考试结束还有\n    deadline: number\n    inline?: boolean\n    onFinish?:any\n}\n\nclass Timer extends Component<ITimer & WithTranslation, any> {\n    render() {\n        return (\n            <div className={\"Timer\"}>\n                {\n                    [''].map(() => {\n                        if (this.props.inline) {\n                            return (\n                                <Card className={\"Timer-inline-card\"}>\n                                    <Space>\n                                        <Space className={\"Timer-inline\"}>\n                                            <ClockCircleOutlined/>\n                                            {this.props.t(\"Countdown\")} :\n                                        </Space>\n                                        <Countdown\n                                            value={this.props.deadline}\n                                            format=\"H 时 m 分 s 秒\"\n                                            onFinish={this.props.onFinish}\n                                        />\n                                    </Space>\n                                </Card>\n                            )\n                        } else {\n                            return (\n                                <Card>\n                                    <Countdown title={this.props.name} value={this.props.deadline}\n                                               format=\"H 时 m 分 s 秒\"\n                                               onFinish={this.props.onFinish}\n                                    />\n                                </Card>\n                            )\n                        }\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nexport default withTranslation()(Timer)","import {withRouter} from \"react-router-dom\";\nimport LoginCheck from \"../common/LoginCheck\";\nimport {Button, Card, Result} from \"antd\";\nimport Timer from \"../common/Timer\";\nimport {isValueEmpty} from \"../../Utils/empty\";\nimport React, {useEffect, useState} from \"react\";\nimport {TimeRangeState} from \"../../Utils/Time\";\nimport MarkdownText from \"../../Utils/MarkdownText\";\nimport cApi from \"../../Utils/API/c-api\"\nimport {UrlPrefix} from \"../../Config/constValue\";\nimport {withTranslation} from \"react-i18next\";\n\nconst Public = (props: any) => {\n    const problemSetId = props.match.params.problemSetId\n\n    const {Meta} = Card;\n    const [info, setInfo] = useState<any>()\n    const State = info && TimeRangeState(info.tm_start, info.tm_end)\n\n    useEffect(() => {\n        if (info === undefined) {\n            cApi.getProblemSetPublic({psid: problemSetId}).then((res: any) => {\n                setInfo(res)\n            })\n        }\n    }, [info])\n\n    const getStartText = () => {\n        if (info === undefined) return \"\"\n        if (info.finish === 1) return \"已交卷\"\n        if (info.tm_end < Date.now()) return \"已结束\"\n        return props.t(\"StartAnswering\")\n    }\n\n    return (\n        <>\n            <LoginCheck jump={true}/>\n            <Result\n                className={\"Ewait\"}\n                icon={<></>}\n                title={info?.name}\n                extra={\n                    <div className={\"Ewait-content\"}>\n                        <Card\n                            cover={\n                                <>\n                                    {State === \"wait\" && (\n                                        <Timer name={props.t(\"Countdown\")}\n                                               deadline={info?.tm_start}\n                                               onFinish={() => setInfo(undefined)}\n                                        />\n                                    )}\n                                    {State === \"running\" && (\n                                        <Timer name={\"距离结束\"}\n                                               deadline={info?.tm_end}\n                                        />\n                                    )}\n                                </>\n                            }\n                            actions={[\n                                [\n                                    <Button\n                                        type=\"primary\" disabled={State !== \"running\" || info?.finish === 1}\n                                        onClick={() => {\n                                            props.history.push(UrlPrefix + `/problemSet/${problemSetId}/overview`)\n                                        }}\n                                    >\n                                        {getStartText()}\n                                    </Button>\n                                ]\n                            ]}\n                            className={\"exam-wait-card\"}\n                        >\n                            {!isValueEmpty(info?.description) && (\n                                <Meta\n                                    style={{paddingBottom: 40}}\n                                    description={\n                                        <>\n                                            <MarkdownText\n                                                id={\"problemSet-description\"}\n                                                text={info?.description}\n                                            />\n                                        </>\n                                    } className={\"exam-wait-tip\"}/>\n                            )}\n                        </Card>\n                    </div>\n                }\n            />\n        </>\n    )\n}\n\n\nexport default withTranslation()(withRouter(Public))\n"],"sourceRoot":""}